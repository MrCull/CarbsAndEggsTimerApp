@page "/potato-timer"
@using System.Timers
@using CarbAndEggTimer.Components.Timer

<a href="/" class="back-link">
    back
</a>

<div class="timer-buttons">
    <div class="button-row">
        <div class="col">
            <button @onclick="() => { selectedPotatoType = PotatoType.Chips; UpdatePotatoCookingTime(); }" class="timer-button @(selectedPotatoType == PotatoType.Chips ? "active" : "")">
                <img src="images/potato/chips.png" alt="Chips">
                Chips
            </button>
        </div>
        <div class="col">
            <button @onclick="() => { selectedPotatoType = PotatoType.Roast; UpdatePotatoCookingTime(); }" class="timer-button @(selectedPotatoType == PotatoType.Roast ? "active" : "")">
                <img src="images/potato/roast.png" alt="Roast">
                Roast
            </button>
        </div>
    </div>
    <div class="button-row">
        <div class="col">
            <button @onclick="() => { selectedPotatoType = PotatoType.Boiled; UpdatePotatoCookingTime(); }" class="timer-button @(selectedPotatoType == PotatoType.Boiled ? "active" : "")">
                <img src="images/potato/boiled.png" alt="Boiled">
                Boiled
            </button>
        </div>
        <div class="col">
            <button @onclick="() => { selectedPotatoType = PotatoType.Baked; UpdatePotatoCookingTime(); }" class="timer-button @(selectedPotatoType == PotatoType.Baked ? "active" : "")">
                <img src="images/potato/baked.png" alt="Baked">
                Baked
            </button>
        </div>
    </div>
</div>



<MyTimer RequiredCookingTime="@requiredCookingTime" />
@code {
    private double requiredCookingTime = 0;

    public enum PotatoType
    {
        Chips,
        Roast,
        Boiled,
        Baked
    }

    private PotatoType selectedPotatoType = PotatoType.Chips;

    // ...

    private void UpdatePotatoCookingTime()
    {
        requiredCookingTime = GetCookingTimeForPotato(selectedPotatoType);
    }

    private double GetCookingTimeForPotato(PotatoType type)
    {
        // Define cooking times for different potato types
        switch (type)
        {
            case PotatoType.Chips:
                return 20; // Chips cooking time in minutes
            case PotatoType.Roast:
                return 30; // Roast potatoes cooking time in minutes
            case PotatoType.Boiled:
                return 15; // Boiled potatoes cooking time in minutes
            case PotatoType.Baked:
                return 40; // Baked potatoes cooking time in minutes
            default:
                return 0;
        }
    }

    private string GetPotatoImagePath(PotatoType type)
    {
        // Define image paths for different potato types
        switch (type)
        {
            case PotatoType.Chips:
                return "images/potato/chips.png";
            case PotatoType.Roast:
                return "images/potato/roast.png";
            case PotatoType.Boiled:
                return "images/potato/boiled.png";
            case PotatoType.Baked:
                return "images/potato/baked.png";
            default:
                return "";
        }
    }
}
