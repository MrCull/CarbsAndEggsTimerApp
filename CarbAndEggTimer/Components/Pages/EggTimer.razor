@page "/egg-timer"
@using System.Timers
@using CarbAndEggTimer.Components.Timer

<a href="/" class="back-link">
    back
</a>

@if (timerState == TimerState.NotStarted || timerState == TimerState.Stopped)
{
    <div class="timer-buttons">
        <div class="button-row">
            @foreach (EggSize size in Enum.GetValues(typeof(EggSize)))
            {
                <div class="col-md-6">
                    <button @onclick="() => { selectedEggSize = size; UpdateTimeRemaining(); }" class="home-button @(selectedEggSize == size ? "active" : "")">
                        <img src="@GetEggImagePath(size)" alt="@size.ToString()">
                        @size
                    </button>
                </div>
            }
        </div>
    </div>

    <div>
        <label>Choose egg doneness:</label>
        <div class="timer-buttons">
            <div class="button-row">
                @foreach (EggDoneness doneness in Enum.GetValues(typeof(EggDoneness)))
                {
                    <div class="col-md-6">
                        <button @onclick="() => { selectedDoneness = doneness; UpdateTimeRemaining(); }" class="timer-button @(selectedDoneness == doneness ? "active" : "")">
                            <img src="@GetDonenessImagePath(doneness)" alt="@doneness.ToString()">
                            @doneness
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <img src="/images/egg/@(eggCookingImageName).png" alt="@(eggCookingImageName)" class="home-image @(cookingCssClass)" />
}


<MyTimer RequiredCookingTime="@requiredCookingTime"
         OnTimerStarted="HandleTimerStarted"
         OnTimerPaused="HandleTimerPaused"
         OnTimerNearDone="HandleTimerNearDone"
         OnTimerDone="HandleTimerDone"
         OnTimerOverDone="HandleTimerOverDone"
         OnTimerStopped="HandleTimerStopped" />

@code {

    private double requiredCookingTime = 0;
    string cookingCssClass = "";

    public enum EggDoneness
    {
        Soft,
        Medium,
        Hard
    }

    public enum EggSize
    {
        Small,
        Medium,
        Large
    }

    private EggDoneness selectedDoneness = EggDoneness.Medium;
    private EggSize selectedEggSize = EggSize.Medium;

    public enum TimerState
    {
        NotStarted,
        Started,
        Paused,
        Expired,
        Stopped
    }

    private TimerState timerState = TimerState.NotStarted;

    private string eggCookingImageName = "";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateTimeRemaining();
    }

    private void UpdateTimeRemaining()
    {
        requiredCookingTime = GetMinsForDoneness(selectedDoneness) * GetFactorForSize(selectedEggSize);
    }

    private int GetMinsForDoneness(EggDoneness doneness)
    {
        switch (doneness)
        {
            case EggDoneness.Soft:
                return 1;
            case EggDoneness.Medium:
                return 6;
            case EggDoneness.Hard:
                return 9;
            default:
                return 0;
        }
    }

    private double GetFactorForSize(EggSize size)
    {
        switch (size)
        {
            case EggSize.Small:
                return 0.09;
            case EggSize.Medium:
                return 1;
            case EggSize.Large:
                return 1.1;
            default:
                return 0;
        }
    }

    private string GetEggImagePath(EggSize size)
    {
        switch (size)
        {
            case EggSize.Small:
                return "images/egg/small.png";
            case EggSize.Medium:
                return "images/egg/medium.png";
            case EggSize.Large:
                return "images/egg/large.png";
            default:
                return "";
        }
    }

    private string GetDonenessImagePath(EggDoneness doneness)
    {
        switch (doneness)
        {
            case EggDoneness.Soft:
                return "images/egg/soft-boiled.png";
            case EggDoneness.Medium:
                return "images/egg/medium-boiled.png";
            case EggDoneness.Hard:
                return "images/egg/hard-boiled.png";
            default:
                return "";
        }
    }

    private void HandleTimerStarted()
    {
        timerState = TimerState.Started;
        cookingCssClass = "home-boiling-image-animation";
        eggCookingImageName = "egg_boiling_happy";
    }

    private void HandleTimerPaused()
    {
        timerState = TimerState.Paused;
        eggCookingImageName = "egg_boiling_happy";
        cookingCssClass = "";
    }

    private void HandleTimerNearDone()
    {
        timerState = TimerState.Started;
        eggCookingImageName = "egg_boiling_happy";
        cookingCssClass = "home-boiling-image-animation";
    }

    private void HandleTimerDone()
    {
        timerState = TimerState.Expired;
        eggCookingImageName = "egg_boiling_happy";
        cookingCssClass = "home-boiling-image-animation";
    }

    private void HandleTimerOverDone()
    {
        timerState = TimerState.Expired;
        eggCookingImageName = "egg_boiling_shocked";
        cookingCssClass = "home-boiling-image-animation";
        StateHasChanged();
    }

    private void HandleTimerStopped()
    {
        timerState = TimerState.Stopped;
        eggCookingImageName = "egg_boiling_happy";
        cookingCssClass = "";
    }
}
            