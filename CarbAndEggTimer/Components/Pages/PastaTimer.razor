@page "/pasta-timer"
@using System.Timers
@using CarbAndEggTimer.Components.Timer

<a href="/" class="back-link">
    back
</a>


<div class="timer-buttons">
    <div class="button-row">
        @if (selectedPastaType is null || selectedPastaType == PastaType.Spaghetti)
        {
            <div class="col-md-6">
                <button @onclick="() => { selectedPastaType = PastaType.Spaghetti; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Spaghetti ? "active" : "")">
                    <img src="@GetPastaImagePath(PastaType.Spaghetti)" alt="Spaghetti">
                    Spaghetti
                </button>
            </div>
        }
        @if (selectedPastaType is null || selectedPastaType == PastaType.Penne)
        {
            <div class="col-md-6">
                <button @onclick="() => { selectedPastaType = PastaType.Penne; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Penne ? "active" : "")">
                    <img src="@GetPastaImagePath(PastaType.Penne)" alt="Penne">
                    Penne
                </button>
            </div>
        }
    </div>
    <div class="button-row">
        @if (selectedPastaType is null || selectedPastaType == PastaType.Farfalle)
        {
            <div class="col-md-6">
                <button @onclick="() => { selectedPastaType = PastaType.Farfalle; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Farfalle ? "active" : "")">
                    <img src="@GetPastaImagePath(PastaType.Farfalle)" alt="Farfalle">
                    Farfalle
                </button>
            </div>
        }
        @if (selectedPastaType is null || selectedPastaType == PastaType.Fusilli)
        {
            <div class="col-md-6">
                <button @onclick="() => { selectedPastaType = PastaType.Fusilli; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Fusilli ? "active" : "")"> <!-- Changed Lasagne to Fusilli here -->
                    <img src="@GetPastaImagePath(PastaType.Fusilli)" alt="Fusilli"> 
                    Fusilli
                </button>
            </div>
        }
    </div>
</div>


<MyTimer RequiredCookingTime="@requiredPastaCookingTime" />

@code {
    private double requiredPastaCookingTime = 0;

    public enum PastaType
    {
        Spaghetti,
        Penne,
        Farfalle,
        Fusilli // Change Lasagne to Fusilli here
    }

    private PastaType? selectedPastaType = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdatePastaCookingTime();
    }

    private void UpdatePastaCookingTime()
    {
        requiredPastaCookingTime = GetCookingTimeForPasta(selectedPastaType);
    }

    private double GetCookingTimeForPasta(PastaType? type)
    {
        // Define cooking times for different pasta types
        switch (type)
        {
            case PastaType.Spaghetti:
                return 10; // Spaghetti cooking time in minutes
            case PastaType.Farfalle:
                return 9; // Farfalle cooking time in minutes
            case PastaType.Fusilli: // Change Lasagne to Fusilli here
                return 9; // Fusilli cooking time in minutes (assuming it's the same as Lasagne)
            case PastaType.Penne:
                return 11; // Penne cooking time in minutes
            default:
                return 0;
        }
    }


    private string GetPastaImagePath(PastaType? type)
    {
        // Define image paths for different pasta types
        switch (type)
        {
            case PastaType.Spaghetti:
                return "images/pasta/spaghetti.png";
            case PastaType.Farfalle:
                return "images/pasta/farfalle.png";
            case PastaType.Penne:
                return "images/pasta/penne.png";
            case PastaType.Fusilli:
                return "images/pasta/fusilli.png"; 
            default:
                return "";
        }
    }
}

