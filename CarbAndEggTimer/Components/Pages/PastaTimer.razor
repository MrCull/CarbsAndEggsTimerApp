@page "/pasta-timer"
@using System.Timers
@using CarbAndEggTimer.Components.Timer

<a href="/" class="back-link">
    back
</a>
<div class="timer-buttons">
    <div class="button-row">
        <div class="col-md-6">
            <button @onclick="() => { selectedPastaType = PastaType.Spaghetti; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Spaghetti ? "active" : "")">
                <img src="@GetPastaImagePath(PastaType.Spaghetti)" alt="Spaghetti">
                Spaghetti
            </button>
        </div>
        <div class="col-md-6">
            <button @onclick="() => { selectedPastaType = PastaType.Penne; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Penne ? "active" : "")">
                <img src="@GetPastaImagePath(PastaType.Penne)" alt="Penne">
                Penne
            </button>
        </div>
    </div>
    <div class="button-row">
        <div class="col-md-6">
            <button @onclick="() => { selectedPastaType = PastaType.Farfalle; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Farfalle ? "active" : "")">
                <img src="@GetPastaImagePath(PastaType.Farfalle)" alt="Farfalle">
                Farfalle
            </button>
        </div>
        <div class="col-md-6">
            <button @onclick="() => { selectedPastaType = PastaType.Lasagne; UpdatePastaCookingTime(); }" class="timer-button @(selectedPastaType == PastaType.Lasagne ? "active" : "")">
                <img src="@GetPastaImagePath(PastaType.Lasagne)" alt="Lasagne">
                Lasagne
            </button>
        </div>
    </div>
</div>


<MyTimer RequiredCookingTime="@requiredPastaCookingTime" />

@code {
    private double requiredPastaCookingTime = 0;

    public enum PastaType
    {
        Spaghetti,
        Penne,
        Farfalle,
        Lasagne
    }

    private PastaType selectedPastaType = PastaType.Spaghetti;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdatePastaCookingTime();
    }

    private void UpdatePastaCookingTime()
    {
        requiredPastaCookingTime = GetCookingTimeForPasta(selectedPastaType);
    }

    private double GetCookingTimeForPasta(PastaType type)
    {
        // Define cooking times for different pasta types
        switch (type)
        {
            case PastaType.Spaghetti:
                return 10; // Spaghetti cooking time in minutes
            case PastaType.Farfalle:
                return 9; // Farfalle cooking time in minutes
            case PastaType.Lasagne:
                return 14; // Lasagne cooking time in minutes
            case PastaType.Penne:
                return 11; // Penne cooking time in minutes
            default:
                return 0;
        }
    }


    private string GetPastaImagePath(PastaType type)
    {
        // Define image paths for different pasta types
        switch (type)
        {
            case PastaType.Spaghetti:
                return "images/pasta/spaghetti.png";
            case PastaType.Farfalle:
                return "images/pasta/farfalle.png";
            case PastaType.Penne:
                return "images/pasta/penne.png";
            case PastaType.Lasagne:
                return "images/pasta/lasagne.png";
            default:
                return "";
        }
    }
}
