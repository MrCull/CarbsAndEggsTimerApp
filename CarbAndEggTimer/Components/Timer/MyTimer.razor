@page "/mytimer"


<div class="@GetBackground()">
    <div class="time-remaining text-center @(GetTimeRemainingClass())">
        <span class="timer-countdown">@FormatTimeRemaining(timeRemaining)</span>
    </div>


    @if (!isTimerFinished)
    {
        <div class="timer-buttons">
            <div class="button-row">
                <div class="col-md-12 text-center">
                    @if (isTimerStarted)
                    {
                        <button @onclick="PauseTimer" class="timer-button pause-button">Pause</button>
                    }
                    else
                    {
                        if (timeRemaining == TimeSpan.FromMinutes(requiredCookingTime))
{
                            <button @onclick="StartTimer" class="timer-button start-button">Start Cooking !!</button>
                        }
                        else
                        {
                            <button @onclick="StartTimer" class="timer-button start-button">Resume</button>
                        }
                    }
                </div>
                @if ((isTimerStarted || isTimerPaused))
                {
                    <div class="button-row">
                        <div class="col-md-6 text-center">
                            <!-- Center the Reset button -->
                            <button @onclick="ResetTimer" class="timer-button reset-button">Reset</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="timer-buttons">
            <div class="button-row">
                <div class="col-md-12 text-center">
                    <!-- Center the Time's Up button and add animation class -->
                    <button @onclick="AcknowledgeTimer" class="timer-button acknowledge-button flash-animation">Time's up!</button>
                </div>
            </div>
            <audio controls loop autoplay hidden>
                <source src="sounds/beep.wav" type="audio/wav" />
            </audio>
        </div>
    }
</div>


@code {
    [Parameter]
    public double requiredCookingTime { get; set; } = 0;

    private bool isTimerStarted = false;
    private bool isTimerFinished = false;
    private bool isTimerPaused = false;

    private TimeSpan timeRemaining;
    private System.Timers.Timer oneSecondTimer = new System.Timers.Timer();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        oneSecondTimer = new System.Timers.Timer(1000);
        oneSecondTimer.Elapsed += ClockTicked;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateTimeRemaining();
    }

    private void StartTimer()
    {
        isTimerStarted = true;
        isTimerFinished = false;
        isTimerPaused = false;

        // Set initial timeRemaining based on selectedDoneness and selectedEggSize
        // int baseTime = GetMinsForDoneness(selectedDoneness);

        // double sizeFactor = GetFactorForSize(selectedEggSize);

        // double totalTime = baseTime * sizeFactor;
        //       timeRemaining = TimeSpan.FromMinutes(requiredCookingTime);

        // Create and start the timer

        oneSecondTimer.Start();
    }


    private void UpdateTimeRemaining()
    {
        timeRemaining = TimeSpan.FromMinutes(requiredCookingTime);
        StateHasChanged();
    }

    private void ClockTicked(object? sender, System.Timers.ElapsedEventArgs e)
    {
        timeRemaining -= TimeSpan.FromSeconds(1);

        if (timeRemaining <= TimeSpan.Zero)
        {
            //oneSecondTimer.Stop();

            // Vibrate the phone
            try
            {
                // Vibrate for 1 second (1000 milliseconds)
                Vibration.Vibrate(TimeSpan.FromMilliseconds(1000));
            }
            catch (FeatureNotSupportedException ex)
            {
                // Handle the exception if vibration is not supported on the device
                // You can display a message or take appropriate action here
            }

            // Set the timerFinished flag to true
            isTimerFinished = true;
        }
        InvokeAsync(StateHasChanged);
    }


    private void PauseTimer()
    {
        if (oneSecondTimer.Enabled)
        {
            oneSecondTimer.Stop();
        }
        else
        {
            oneSecondTimer.Start();
        }
        isTimerStarted = false;
        isTimerPaused = true;
    }

    private void ResetTimer()
    {
        // oneSecondTimer.Stop();
        isTimerFinished = false;
        UpdateTimeRemaining();
    }

    public void Dispose()
    {
        oneSecondTimer?.Dispose();
    }

    private void AcknowledgeTimer()
    {
        // Stop the vibration
        //        Vibration.Cancel()

        // Stop the sound (optional, if needed)
        // Note: Stopping the sound may not be straightforward and depends on the specific sound player you're using
        // You may need to use a different approach to control sound playback.

        // Reset the timerFinished flag
        isTimerFinished = false;
        oneSecondTimer.Stop();
        ResetTimer();
    }


    private string GetTimeRemainingClass()
    {
        if (!isTimerStarted && timeRemaining.TotalSeconds < 1)
        {
            return "grey-text";
        }
        if (timeRemaining.TotalSeconds > 10)
        {
            return "black-text"; 
        }
        else if (timeRemaining.TotalSeconds > 0)
        {
            return "orange-text"; 
        }
        else if (timeRemaining.TotalSeconds > -10)
        {
            return "green-text";
        }
        else
        {
            return "red-text";
        }
    }

    private string FormatTimeRemaining(TimeSpan time)
    {
        if (time.TotalSeconds < -10)
        {
            // If time is negative, display it as a negative value
            return "-" + time.Duration().ToString(@"mm\:ss");
        }
        else if (time.TotalSeconds < 1)
        {
            // If time is negative, display it as a negative value
            return "00:00";
        }
        else
        {
            // Display positive time normally
            return time.ToString(@"mm\:ss");
        }
    }

    private string GetBackground()
        => isTimerStarted ? "animated-boil-background" : "";
    

}
