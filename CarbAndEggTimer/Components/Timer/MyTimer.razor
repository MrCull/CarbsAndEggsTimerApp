@page "/mytimer"

@if (!timerFinished)
{
    <button @onclick="StartTimer">Start</button>

    <div>
        Time remaining: @timeRemaining.ToString(@"mm\:ss")
    </div>
    @if (timerStarted)
    {
        <button @onclick="PauseTimer">Pause</button>
        <button @onclick="ResetTimer">Reset</button>
    }
}
else
{
    <button @onclick="AcknowledgeTimer" class="acknowledge-button">Time's up!</button>
    <audio controls>
        <source src="sounds/beep.wav" type="audio/wav" />
    </audio>
}

@code {
    [Parameter]
    public double requiredCookingTime { get; set; } = 0;

    private bool timerStarted = false;
    private bool timerFinished = false;

    private TimeSpan timeRemaining;
    private System.Timers.Timer oneSecondTimer = new System.Timers.Timer();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        oneSecondTimer = new System.Timers.Timer(1000);
        oneSecondTimer.Elapsed += ClockTicked;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        UpdateTimeRemaining();
    }

    private void StartTimer()
    {
        timerStarted = true;
        timerFinished = false;


        // Set initial timeRemaining based on selectedDoneness and selectedEggSize
        // int baseTime = GetMinsForDoneness(selectedDoneness);

        // double sizeFactor = GetFactorForSize(selectedEggSize);

        // double totalTime = baseTime * sizeFactor;
        //       timeRemaining = TimeSpan.FromMinutes(requiredCookingTime);

        // Create and start the timer

        oneSecondTimer.Start();
    }


    private void UpdateTimeRemaining()
    {
        timeRemaining = TimeSpan.FromMinutes(requiredCookingTime);
        StateHasChanged();
    }

    private void ClockTicked(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (timeRemaining > TimeSpan.Zero)
        {
            timeRemaining -= TimeSpan.FromSeconds(1);
            InvokeAsync(StateHasChanged);
        }
        else
        {
            oneSecondTimer.Stop();
            timerFinished = true;

            // Notify the user that the timer has finished
            Console.WriteLine("Timer finished!");

            // Play a sound
            using (var player = new SoundPlayer("path_to_your_sound_file.wav"))
            {
                player.Play();
            }

            // Vibrate the phone
            try
            {
                // Vibrate for 1 second (1000 milliseconds)
                Vibration.Vibrate(TimeSpan.FromMilliseconds(1000));
            }
            catch (FeatureNotSupportedException ex)
            {
                // Handle the exception if vibration is not supported on the device
                // You can display a message or take appropriate action here
            }

            // Set the timerFinished flag to true
            timerFinished = true;
        }
    }


    private void PauseTimer()
    {
        if (oneSecondTimer.Enabled)
        {
            oneSecondTimer.Stop();
        }
        else
        {
            oneSecondTimer.Start();
        }
        timerFinished = false;
    }

    private void ResetTimer()
    {
        oneSecondTimer.Stop();
        timerFinished = false;
        UpdateTimeRemaining();
    }

    public void Dispose()
    {
        oneSecondTimer?.Dispose();
    }

    private void AcknowledgeTimer()
    {
        // Stop the vibration
        Vibration.Cancel();

        // Stop the sound (optional, if needed)
        // Note: Stopping the sound may not be straightforward and depends on the specific sound player you're using
        // You may need to use a different approach to control sound playback.

        // Reset the timerFinished flag
        timerFinished = false;
        ResetTimer();
    }


}
