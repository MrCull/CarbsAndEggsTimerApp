@page "/mytimer"


<div class="@GetBackground()">
    <div class="time-remaining text-center @(GetTimeRemainingClass())">
        <span class="timer-countdown">@FormatTimeRemaining(timeRemaining)</span>
    </div>


    @if (timerState != TimerState.Done && timerState != TimerState.OverDone)
    {
        <div class="timer-buttons">
            <div class="button-row">
                <div class="col-md-12 text-center">
                    @if (timerState == TimerState.Started || timerState == TimerState.NearDone)
                    {
                        <button @onclick="PauseTimer" class="timer-button pause-button">Pause</button>
                    }
                    else
                    {
                        if (timeRemaining == TimeSpan.FromMinutes(requiredCookingTime))
{
                            <button @onclick="StartTimer" class="timer-button start-button">Start Cooking !!</button>
                        }
                        else
                        {
                            <button @onclick="StartTimer" class="timer-button start-button">Resume</button>
                        }
                    }
                </div>
                @if ((timerState == TimerState.Started || timerState == TimerState.Paused || timerState == TimerState.NearDone))
                {
                    <div class="button-row">
                        <div class="col-md-6 text-center">
                            <!-- Center the Reset button -->
                            <button @onclick="ResetTimer" class="timer-button reset-button">Reset</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="timer-buttons">
            <div class="button-row">
                <div class="col-md-12 text-center">
                    <!-- Center the Time's Up button and add animation class -->
                    <button @onclick="AcknowledgeTimer" class="timer-button acknowledge-button flash-animation">Time's up!</button>
                </div>
            </div>
            <audio controls loop autoplay hidden>
                <source src="sounds/beep.wav" type="audio/wav" />
            </audio>
        </div>
    }
</div>


@code {
    [Parameter]
    public double requiredCookingTime { get; set; } = 0;
    private double previousRequiredCookingTime { get; set; } = 0;

    [Parameter] public EventCallback OnTimerStarted { get; set; }
    [Parameter] public EventCallback OnTimerPaused { get; set; }
    [Parameter] public EventCallback OnTimerNearDone { get; set; }
    [Parameter] public EventCallback OnTimerDone { get; set; }
    [Parameter] public EventCallback OnTimerStopped { get; set; }
    [Parameter] public EventCallback OnTimerOverDone { get; set; }


    private enum TimerState
    {
        NotStarted,
        Started,
        Paused,
        NearDone,
        Done,
        OverDone
    }

    private TimerState timerState = TimerState.NotStarted;

    private TimeSpan timeRemaining;
    private System.Timers.Timer oneSecondTimer = new System.Timers.Timer();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        oneSecondTimer = new System.Timers.Timer(1000);
        oneSecondTimer.Elapsed += ClockTicked;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (previousRequiredCookingTime != requiredCookingTime)
        {
            UpdateTimeRemaining();
            previousRequiredCookingTime = requiredCookingTime;
        }
    }

    private async void StartTimer()
    {
        timerState = TimerState.Started;

        oneSecondTimer.Start();

        await OnTimerStarted.InvokeAsync();
    }


    private void UpdateTimeRemaining()
    {
        timeRemaining = TimeSpan.FromMinutes(requiredCookingTime);
        StateHasChanged();
    }

    private async void ClockTicked(object? sender, System.Timers.ElapsedEventArgs e)
    {
        timeRemaining -= TimeSpan.FromSeconds(1);

        if (timerState == TimerState.NotStarted && timeRemaining.TotalSeconds < 1)
        {
            
        }
        if (timeRemaining.TotalSeconds > 10)
        {

        }
        else if (timeRemaining.TotalSeconds > 0)
        {
            if (timerState != TimerState.NearDone || timerState != TimerState.Paused)
            {
                timerState = TimerState.NearDone;
                await InvokeAsync(async () =>
                {
                    await OnTimerNearDone.InvokeAsync();
                });
            }
        }
        else if (timeRemaining.TotalSeconds > -10)
        {
            if (timerState != TimerState.Done)
            {
                timerState = TimerState.Done;
                await InvokeAsync(async () =>
                {
                    await OnTimerDone.InvokeAsync();
                });
            }
        }
        else
        {
            if (timerState != TimerState.OverDone)
            {
                timerState = TimerState.OverDone;
                await InvokeAsync(async () =>
                {
                    await OnTimerOverDone.InvokeAsync();
                });
            }
        }

        if (timerState == TimerState.Done || timerState == TimerState.OverDone)
        {
            // Vibrate the phone
            try
            {
                // Vibrate for 1 second (1000 milliseconds)
                Vibration.Vibrate(TimeSpan.FromMilliseconds(1000));
            }
            catch (FeatureNotSupportedException ex)
            {
                // Handle the exception if vibration is not supported on the device
                // You can display a message or take appropriate action here
            }
        }

        await InvokeAsync(StateHasChanged);
    }


    private async void PauseTimer()
    {
        if (oneSecondTimer.Enabled)
        {
            oneSecondTimer.Stop();
        }
        else
        {
            oneSecondTimer.Start();
        }

        timerState = TimerState.Paused;

        await OnTimerPaused.InvokeAsync();
    }

    private void ResetTimer()
    {
        UpdateTimeRemaining();
    }

    public void Dispose()
    {
        oneSecondTimer?.Dispose();
    }

    private async void AcknowledgeTimer()
    {
        // Stop the vibration
        //        Vibration.Cancel()

        // Stop the sound (optional, if needed)
        // Note: Stopping the sound may not be straightforward and depends on the specific sound player you're using
        // You may need to use a different approach to control sound playback.

        // Reset the timerFinished flag
        timerState = TimerState.NotStarted;
        oneSecondTimer.Stop();
        ResetTimer();

        await OnTimerStopped.InvokeAsync();
    }


    private string GetTimeRemainingClass()
    {
        if (timerState == TimerState.NotStarted && timeRemaining.TotalSeconds < 1)
        {
            return "grey-text";
        }
        if (timerState == TimerState.Started)
        {
            return "black-text"; 
        }
        else if (timerState == TimerState.NearDone)
        {
            return "orange-text"; 
        }
        else if (timerState == TimerState.Done)
        {
            return "green-text flash-animation";
        }
        else if (timerState == TimerState.OverDone)
        {
            return "red-text";
        }
        else
        {
            // should never happen
            return "black-text";
        }
    }

    private string FormatTimeRemaining(TimeSpan time)
    {
        if (time.TotalSeconds < -10)
        {
            // If time is negative, display it as a negative value
            return "-" + time.Duration().ToString(@"mm\:ss");
        }
        else if (time.TotalSeconds < 1)
        {
            // Show 0 for some seconds
            return "00:00";
        }
        else
        {
            // Display positive time normally
            return time.ToString(@"mm\:ss");
        }
    }

    private string GetBackground()
    {
        if (timerState == TimerState.Started || timerState == TimerState.Done || timerState == TimerState.NearDone || timerState == TimerState.OverDone)
        {
            return "animated-boil-background";
        }

        return "";
    }
    

}
